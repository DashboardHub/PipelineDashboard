service: PipelineDashboardApi

provider:
  name: aws
  runtime: nodejs6.10
  region: eu-west-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:CreateTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${file(./config.json):dynamodb.environments.table}"
    - Effect: Allow
      Action:
        - dynamodb:CreateTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
        - dynamodb:BatchWriteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${file(./config.json):dynamodb.deployed.table}"
    - Effect: Allow
      Action:
        - dynamodb:CreateTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
        - dynamodb:BatchWriteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${file(./config.json):dynamodb.pinged.table}"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"
  environment:
    STAGE: ${opt:stage}
    AUTH0_CLIENT_ID: ${file(./config.json):envars.AUTH0_CLIENT_ID}
    AUTH0_CLIENT_SECRET: ${file(./config.json):envars.AUTH0_CLIENT_SECRET}

functions:
  auth:
    handler: src/auth/handler.auth
  publicEnvironmentList:
    handler: src/environments/list.public
    events:
      - http:
          path: environments
          method: get
          integration: lambda-proxy
          cors: true
  publicEnvironmentGet:
    handler: src/environments/get.public
    events:
      - http:
          path: environments/{id}/view
          method: get
          integration: lambda-proxy
          cors: true
  environmentList:
      handler: src/environments/list.private
      events:
        - http:
            path: environments/list
            authorizer: auth
            method: get
            integration: lambda
            cors:
              origins:
                - '*'
              headers:
                - Content-Type
                - X-Amz-Date
                - Authorization
                - X-Api-Key
                - X-Amz-Security-Token
  environmentGet:
    handler: src/environments/get.private
    events:
      - http:
          path: environments/{id}
          integration: lambda
          authorizer: auth
          method: get
          request:
            parameters:
              paths:
                id: true
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  environmentCreate:
    handler: src/environments/create.create
    events:
      - http:
          path: environments
          integration: lambda
          authorizer: auth
          method: post
          response:
            template: $input.path('$')
            headers:
              Content-Type: "'application/json'"
            statusCodes:
              201:
                pattern: ''
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  environmentUpdate:
    handler: src/environments/update.update
    events:
      - http:
          path: environments/{id}
          integration: lambda
          authorizer: auth
          method: patch
          request:
            parameters:
              paths:
                id: true
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  environmentDelete:
    handler: src/environments/delete.delete
    events:
      - http:
          path: environments/{id}
          integration: lambda
          authorizer: auth
          method: delete
          request:
            parameters:
              paths:
                id: true
          response:
            template: $input.path('$')
            headers:
              Content-Type: "'application/json'"
            statusCodes:
              204:
                pattern: ''
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  tokenCreate:
    handler: src/environments/tokens/create.create
    events:
      - http:
          path: environments/{id}/tokens
          integration: lambda
          authorizer: auth
          method: post
          response:
            template: $input.path('$')
            headers:
              Content-Type: "'application/json'"
            statusCodes:
              201:
                pattern: ''
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  tokenDelete:
    handler: src/environments/tokens/delete.delete
    events:
      - http:
          path: environments/{id}/tokens/{tokenId}
          integration: lambda
          authorizer: auth
          method: delete
          response:
            template: $input.path('$')
            headers:
              Content-Type: "'application/json'"
            statusCodes:
              204:
                pattern: ''
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  tokenList:
    handler: src/environments/tokens/list.list
    events:
      - http:
          path: environments/{id}/tokens
          authorizer: auth
          method: get
          integration: lambda
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  deployedList:
    handler: src/environments/deployed/list.list
    events:
      - http:
          path: environments/{id}/deployed
          authorizer: auth
          method: get
          integration: lambda
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  deployedCreate:
    handler: src/environments/deployed/create.create
    events:
      - http:
          path: environments/{id}/deployed/{tokenId}/{state}
          method: post
          integration: lambda
          response:
            template: $input.path('$')
            headers:
              Content-Type: "'application/json'"
            statusCodes:
              201:
                pattern: ''
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  releaseList:
    handler: src/environments/releases/list.list
    events:
      - http:
          path: environments/{id}/releases
          authorizer: auth
          method: get
          integration: lambda
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  monitorCreate:
    handler: src/environments/monitors/create.create
    events:
      - http:
          path: environments/{id}/monitors
          integration: lambda
          authorizer: auth
          method: post
          response:
            template: $input.path('$')
            headers:
              Content-Type: "'application/json'"
            statusCodes:
              201:
                pattern: ''
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  monitorDelete:
    handler: src/environments/monitors/delete.delete
    events:
      - http:
          path: environments/{id}/monitors/{monitorId}
          integration: lambda
          authorizer: auth
          method: delete
          response:
            template: $input.path('$')
            headers:
              Content-Type: "'application/json'"
            statusCodes:
              204:
                pattern: ''
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  monitorList:
    handler: src/environments/monitors/list.list
    events:
      - http:
          path: environments/{id}/monitors
          authorizer: auth
          method: get
          integration: lambda
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  pingedList:
    handler: src/environments/monitors/pinged/list.list
    events:
      - http:
          path: environments/{id}/monitors/{monitorId}/pings
          authorizer: auth
          method: get
          integration: lambda
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  monitors:
    handler: src/environments/monitors/pinged/ping.monitors
    events:
      - schedule: rate(30 minutes)
  ping:
    handler: src/environments/monitors/pinged/ping.ping
    events:
      - http:
          path: environments/{id}/monitors/{monitorId}/ping
          authorizer: auth
          method: post
          integration: lambda
          response:
            template: $input.path('$')
            headers:
              Content-Type: "'application/json'"
            statusCodes:
              204:
                pattern: ''
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-domain-manager

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      test:
        sources:
          - table: pipelinedashboard-environments-test
            sources: [../data/environments.json]
          - table: pipelinedashboard-deployed-test
            sources: [../data/deployed.json]
          - table: pipelinedashboard-pinged-test
            sources: [../data/pinged.json]
  customDomain:
    certificateName: dashboardhub.io
    domainName: ${file(./config.json):domain.${opt:stage}}
    basePath: ''
    stage: ${opt:stage}
    createRoute53Record: true

resources:
  Resources:
    EnvironmentsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${file(./config.json):dynamodb.environments.table}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    DeployedDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${file(./config.json):dynamodb.deployed.table}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    PingedDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${file(./config.json):dynamodb.pinged.table}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
